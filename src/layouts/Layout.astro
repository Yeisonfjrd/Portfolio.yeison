---
import "@fontsource-variable/outfit";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import { ViewTransitions } from "astro:transitions";
import BackgroundAnimation from "@/components/BackgroundAnimation";

interface Props {
  title: string;
  description: string;
}

const { description, title } = Astro.props;
---

<!doctype html>
<html lang="es" class="scroll-smooth dark">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <ViewTransitions />
  </head>
  <body class="relative text-slate-300 bg-gradient-to-b from-[#0f0f1a] via-[#1a1a2e] to-[#2a1a3a]">
    <BackgroundAnimation client:load />
    
    <div class="relative z-10">
      <Header />
      <main class="min-h-screen px-4 pt-16 pb-16 sm:px-6 lg:px-8">
        <slot />
      </main>
      <Footer />
    </div>

    <style is:global>
      :root {
        color-scheme: dark;
        --accent-light: #7c3aed;
        --accent-dark: #8b5cf6;
      }

      html {
        font-family: "Outfit Variable", system-ui, sans-serif;
        -webkit-font-smoothing: antialiased;
      }

      body {
        transition: background-color 0.5s ease, color 0.5s ease;
        overscroll-behavior: none;
      }

      ::selection {
        @apply bg-violet-500/30;
      }

      .reveal {
        opacity: 0;
        transform: translateY(20px);
        transition: opacity 0.8s ease, transform 0.8s cubic-bezier(0.16, 1, 0.3, 1);
      }

      .reveal.active {
        opacity: 1;
        transform: translateY(0);
      }

      .stagger-delay-1 { transition-delay: 0.1s; }
      .stagger-delay-2 { transition-delay: 0.2s; }
      .stagger-delay-3 { transition-delay: 0.3s; }
      .stagger-delay-4 { transition-delay: 0.4s; }
      .stagger-delay-5 { transition-delay: 0.5s; }

      @media (prefers-reduced-motion: reduce) {
        *, ::before, ::after {
          animation-duration: 0.01ms !important;
          animation-iteration-count: 1 !important;
          transition-duration: 0.01ms !important;
          scroll-behavior: auto !important;
        }
        .reveal {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .gradient-text {
        @apply bg-clip-text text-transparent bg-gradient-to-r from-violet-400 to-indigo-400;
      }
    </style>

    <script>
      document.addEventListener('astro:page-load', () => {
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry.target.classList.add('active');
            }
          });
        }, { 
          threshold: 0.1,
          rootMargin: '0px 0px -100px 0px'
        });

        document.querySelectorAll('.reveal').forEach((element) => {
          observer.observe(element);
        });
      });
    </script>
  </body>
</html>