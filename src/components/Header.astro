---

const navItems = [
  {
    title: "Experiencia",
    label: "experiencia",
    url: "/#experiencia",
  },
  {
    title: "Proyectos",
    label: "proyectos",
    url: "/#proyectos",
  },
  {
    title: "Sobre m√≠",
    label: "sobre-mi",
    url: "/#sobre-mi",
  },
  {
    title: "Contacto",
    label: "contacto",
    url: "https://mail.google.com/mail/?view=cm&fs=1&to=andresfajardo1606@gmail.com",
  },
];
---

<header class="fixed top-0 z-50 w-full py-3">
  <div class="px-4 mx-auto nav-container sm:px-6 lg:px-8 max-w-7xl">
    <nav class="flex items-center justify-between md:justify-center">
      <a href="/" class="text-xl font-bold text-white md:hidden">
        <span class="text-violet-400">YF</span>
      </a>
      
      <div class="hidden md:flex items-center space-x-1 px-3 py-2 rounded-full bg-slate-900/80 backdrop-blur-md border border-slate-700/50 shadow-[0_0_15px_rgba(139,92,246,0.15)]">
        {
          navItems.map((link) => (
            <a
              class="relative px-3 py-1.5 text-sm font-medium text-slate-300 hover:text-violet-400 transition-colors rounded-full nav-link"
              aria-label={link.label}
              href={link.url}
              target={link.label === "contacto" ? "_blank" : undefined}
              rel={link.label === "contacto" ? "noopener noreferrer" : undefined}
            >
              {link.title}
              <span class="nav-indicator absolute bottom-0 left-0 right-0 h-0.5 bg-violet-500 rounded-full scale-x-0 transition-transform duration-300"></span>
            </a>
          ))
        }
      </div>
      
      <div class="md:hidden">
        <button id="mobile-menu-button" class="p-2 transition-colors rounded-md text-slate-300 hover:bg-slate-800">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-menu">
            <line x1="4" x2="20" y1="12" y2="12"></line>
            <line x1="4" x2="20" y1="6" y2="6"></line>
            <line x1="4" x2="20" y1="18" y2="18"></line>
          </svg>
        </button>
      </div>
    </nav>
  </div>
  
  <div id="mobile-menu" class="hidden mt-2 border-b md:hidden bg-slate-900 border-slate-800">
    <div class="px-4 py-3 space-y-3">
      {
        navItems.map((link) => (
          <a
            class="block py-2 transition-colors text-slate-300 hover:text-violet-400"
            aria-label={link.label}
            href={link.url}
            target={link.label === "contacto" ? "_blank" : undefined}
            rel={link.label === "contacto" ? "noopener noreferrer" : undefined}
          >
            {link.title}
          </a>
        ))
      }
    </div>
  </div>
</header>

<script>
  interface IntersectionEntry {
    isIntersecting: boolean;
    target: HTMLElement;
  }

  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll<HTMLElement>("section[data-section]");
    const navLinks = document.querySelectorAll<HTMLElement>(".nav-link");
    const mobileMenuButton = document.getElementById("mobile-menu-button");
    const mobileMenu = document.getElementById("mobile-menu");
    
    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener("click", () => {
        mobileMenu.classList.toggle("hidden");
      });
    }

    const callback = (entries: IntersectionObserverEntry[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navLinks.forEach((link) => {
            const indicator = link.querySelector<HTMLElement>(".nav-indicator");
            if (link.getAttribute("aria-label") === (entry.target as HTMLElement).id) {
              link.classList.add("text-violet-400");
              indicator?.classList.add("scale-x-100");
            } else {
              link.classList.remove("text-violet-400");
              indicator?.classList.remove("scale-x-100");
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });
</script>

<style>
  .nav-container {
    animation: nav-shadow 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  @keyframes nav-shadow {
    0% {
      @apply dark:bg-transparent bg-transparent;
    }
    to {
      @apply shadow-[0_0_20px_rgba(139,92,246,0.2)];
    }
  }
</style>